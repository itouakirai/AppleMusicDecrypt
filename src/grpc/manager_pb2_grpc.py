# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from src.grpc import manager_pb2 as manager__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WrapperManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/manager.v1.WrapperManagerService/Status',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=manager__pb2.StatusReply.FromString,
                _registered_method=True)
        self.Login = channel.stream_stream(
                '/manager.v1.WrapperManagerService/Login',
                request_serializer=manager__pb2.LoginRequest.SerializeToString,
                response_deserializer=manager__pb2.LoginReply.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/manager.v1.WrapperManagerService/Logout',
                request_serializer=manager__pb2.LogoutRequest.SerializeToString,
                response_deserializer=manager__pb2.LogoutReply.FromString,
                _registered_method=True)
        self.Decrypt = channel.stream_stream(
                '/manager.v1.WrapperManagerService/Decrypt',
                request_serializer=manager__pb2.DecryptRequest.SerializeToString,
                response_deserializer=manager__pb2.DecryptReply.FromString,
                _registered_method=True)
        self.M3U8 = channel.unary_unary(
                '/manager.v1.WrapperManagerService/M3U8',
                request_serializer=manager__pb2.M3U8Request.SerializeToString,
                response_deserializer=manager__pb2.M3U8Reply.FromString,
                _registered_method=True)
        self.Lyrics = channel.unary_unary(
                '/manager.v1.WrapperManagerService/Lyrics',
                request_serializer=manager__pb2.LyricsRequest.SerializeToString,
                response_deserializer=manager__pb2.LyricsReply.FromString,
                _registered_method=True)
        self.License = channel.unary_unary(
                '/manager.v1.WrapperManagerService/License',
                request_serializer=manager__pb2.LicenseRequest.SerializeToString,
                response_deserializer=manager__pb2.LicenseReply.FromString,
                _registered_method=True)
        self.WebPlayback = channel.unary_unary(
                '/manager.v1.WrapperManagerService/WebPlayback',
                request_serializer=manager__pb2.WebPlaybackRequest.SerializeToString,
                response_deserializer=manager__pb2.WebPlaybackReply.FromString,
                _registered_method=True)


class WrapperManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decrypt(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def M3U8(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lyrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def License(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebPlayback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WrapperManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=manager__pb2.StatusReply.SerializeToString,
            ),
            'Login': grpc.stream_stream_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=manager__pb2.LoginRequest.FromString,
                    response_serializer=manager__pb2.LoginReply.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=manager__pb2.LogoutRequest.FromString,
                    response_serializer=manager__pb2.LogoutReply.SerializeToString,
            ),
            'Decrypt': grpc.stream_stream_rpc_method_handler(
                    servicer.Decrypt,
                    request_deserializer=manager__pb2.DecryptRequest.FromString,
                    response_serializer=manager__pb2.DecryptReply.SerializeToString,
            ),
            'M3U8': grpc.unary_unary_rpc_method_handler(
                    servicer.M3U8,
                    request_deserializer=manager__pb2.M3U8Request.FromString,
                    response_serializer=manager__pb2.M3U8Reply.SerializeToString,
            ),
            'Lyrics': grpc.unary_unary_rpc_method_handler(
                    servicer.Lyrics,
                    request_deserializer=manager__pb2.LyricsRequest.FromString,
                    response_serializer=manager__pb2.LyricsReply.SerializeToString,
            ),
            'License': grpc.unary_unary_rpc_method_handler(
                    servicer.License,
                    request_deserializer=manager__pb2.LicenseRequest.FromString,
                    response_serializer=manager__pb2.LicenseReply.SerializeToString,
            ),
            'WebPlayback': grpc.unary_unary_rpc_method_handler(
                    servicer.WebPlayback,
                    request_deserializer=manager__pb2.WebPlaybackRequest.FromString,
                    response_serializer=manager__pb2.WebPlaybackReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'manager.v1.WrapperManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('manager.v1.WrapperManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WrapperManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/Status',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            manager__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/manager.v1.WrapperManagerService/Login',
            manager__pb2.LoginRequest.SerializeToString,
            manager__pb2.LoginReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/Logout',
            manager__pb2.LogoutRequest.SerializeToString,
            manager__pb2.LogoutReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Decrypt(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/manager.v1.WrapperManagerService/Decrypt',
            manager__pb2.DecryptRequest.SerializeToString,
            manager__pb2.DecryptReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def M3U8(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/M3U8',
            manager__pb2.M3U8Request.SerializeToString,
            manager__pb2.M3U8Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Lyrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/Lyrics',
            manager__pb2.LyricsRequest.SerializeToString,
            manager__pb2.LyricsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def License(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/License',
            manager__pb2.LicenseRequest.SerializeToString,
            manager__pb2.LicenseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WebPlayback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/manager.v1.WrapperManagerService/WebPlayback',
            manager__pb2.WebPlaybackRequest.SerializeToString,
            manager__pb2.WebPlaybackReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
